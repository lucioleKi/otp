module 'test' ['main'/1,
	       'module_info'/0,
	       'module_info'/1]
    attributes [%% Line 1
		'file' =
		    %% Line 1
		    [{[116|[101|[115|[116|[46|[101|[114|[108]]]]]]]],1}]]
'main'/1 =
    %% Line 137
    ( fun (_0) ->
	  %% Line 143
	  ( letrec
		'lc$^0'/1 =
		    fun (_6) ->
			case _6 of
			  <[E|_2]> when 'true' ->
			      let <_5> =
				  apply 'some_test'/1
				      (E)
			      in  case _5 of
				    <Res>
					when call 'erlang':'/='
					      (_5,
					       'ok') ->
					let <_12> =
					    apply 'lc$^0'/1
						(_2)
					in  ( [Res|_12]
					      -| ['compiler_generated'] )
				    <( _15
				       -| ['compiler_generated'] )> when 'true' ->
					apply 'lc$^0'/1
					    (_2)
				  end
			  ( <[_1|_2]> when 'true' ->
				apply 'lc$^0'/1
				    (_2)
			    -| ['compiler_generated'] )
			  <[]> when 'true' ->
			      []
			  ( <_7> when 'true' ->
				call 'erlang':'error'
				    ({'bad_generator',_7})
			    -| ['compiler_generated'] )
			end
	    in  apply 'lc$^0'/1
		    (( _0
		       -| [{'function',{'main',1}}] ))
	    -| ['list_comprehension'] )
      -| [{'function',{'main',1}}] )
'some_test'/1 =
    %% Line 147
    ( fun (_0) ->
	  ( _0
	    -| [{'function',{'some_test',1}}] )
      -| [{'function',{'some_test',1}}] )
'module_info'/0 =
    ( fun () ->
	  call 'erlang':'get_module_info'
	      ('test')
      -| [{'function',{'module_info',0}}] )
'module_info'/1 =
    ( fun (_0) ->
	  call 'erlang':'get_module_info'
	      ('test', ( _0
			 -| [{'function',{'module_info',1}}] ))
      -| [{'function',{'module_info',1}}] )
end
